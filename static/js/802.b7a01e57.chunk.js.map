{"version":3,"file":"static/js/802.b7a01e57.chunk.js","mappings":"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","sources":["store/quotes.ts","components/modal/index.tsx","components/table/row/index.tsx","components/table/row/form/index.tsx","components/table/index.tsx","pages/quotes/index.tsx"],"sourcesContent":["import axios from \"axios\";\nimport {makeAutoObservable} from \"mobx\";\nimport {IQuotesSet} from \"../components/table/types\";\n\ninterface IQuotes {\n  modalOpen: boolean;\n  loading: boolean;\n  error: Error | null;\n  quotesObjPart1: IQuotesSet;\n  quotesObjPart2: IQuotesSet;\n}\n\nclass Quotes implements IQuotes {\n  modalOpen = false;\n  loading = false;\n  error = null;\n  quotesObjPart1 = {};\n  quotesObjPart2 = {};\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  fetchQuotes() {\n    const server_url = process.env.REACT_APP_SERVER_URL;\n    const url = server_url + \"/quotes\";\n\n    const splitQuotesHalf = (resQuotes: IQuotesSet) => {\n      const entries = Object.entries(resQuotes);\n      const indexToSplitBefore = Math.floor(entries.length / 2);\n\n      const ob1 = Object.fromEntries(entries.slice(0, indexToSplitBefore));\n      const ob2 = Object.fromEntries(entries.slice(indexToSplitBefore));\n\n      this.quotesObjPart1 = {...this.quotesObjPart1, ...ob1};\n      this.quotesObjPart2 = {...this.quotesObjPart2, ...ob2};\n    };\n\n    if (\n      !Object.keys(this.quotesObjPart1).length ||\n      !Object.keys(this.quotesObjPart2).length\n    ) {\n      this.loading = true;\n    }\n\n    axios\n      .get(url)\n      .then((res) => {\n        splitQuotesHalf(res.data);\n        this.error = null;\n        this.loading = false;\n      })\n      .catch((err) => {\n        console.log(err);\n        this.error = err;\n      });\n  }\n}\n\nexport default new Quotes();\n","import React, {useEffect, useState} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\n\ninterface IModalProps {\n  title?: string;\n  open?: boolean;\n  onClose?: Function;\n}\n\ntype CustomModalProps = React.PropsWithChildren<IModalProps>;\n\nconst CustomModal = ({\n  children, // Body element\n  title = \"\", // Header element or text\n  open = false, // Trigger to show/hide\n  onClose = () => {}, // Callback on close modal\n}: CustomModalProps) => {\n  const startZ: number = 1000;\n  const [index, setIndex] = useState<Number | null>(null);\n\n  const el = React.useMemo(() => document.createElement(\"div\"), []);\n  const modal = React.useMemo(\n    () => ReactDOM.createPortal(getContent(), el),\n    [open, children]\n  );\n\n  useEffect(() => {\n    document.body.appendChild(el);\n    return () => {\n      document.body.removeChild(el);\n    };\n  }, [el]);\n\n  useEffect(() => {\n    if (open) {\n      setIndex(getCount() + startZ);\n      document.documentElement.style.overflow = \"hidden\";\n    } else {\n      const _count = document.querySelectorAll(\".customDrawer-open\").length;\n      if (!_count) {\n        document.documentElement.style.overflow = \"unset\";\n      }\n    }\n  }, [open]);\n\n  function getContent() {\n    return (\n      <div\n        style={{\n          visibility: open ? \"visible\" : \"hidden\",\n          zIndex: index as number,\n        }}\n      >\n        <div className=\"customModal-overlay\" onClick={handlerClose} />\n        <div className={getClass()}>\n          {title && (\n            <div className=\"customModal-header\">\n              {\n                <div\n                  className=\"customModal-header-cross\"\n                  onClick={handlerClose}\n                >\n                  &#215;\n                </div>\n              }\n              {title}\n            </div>\n          )}\n          <div className=\"customModal-body\">{children}</div>\n        </div>\n      </div>\n    );\n  }\n\n  function getClass(): string {\n    let classList = [\"customModal\"];\n    if (open) {\n      classList.push(\"customModal-open\");\n    }\n    return classList.join(\" \");\n  }\n\n  function getCount(): number {\n    return document.querySelectorAll(\".customModal-open\").length + 1;\n  }\n\n  function handlerClose() {\n    onClose();\n  }\n\n  return modal;\n};\n\nexport default CustomModal;\n","import React, {useEffect, useRef} from \"react\";\nimport {usefulKeysConfig} from \"..\";\nimport {IRowData, NumericalString, TRowKey} from \"../types\";\n\ninterface TableRowProps {\n  pairName: string;\n  rowData: IRowData;\n  // onClick?: (params: any) => any;\n  onClick?: () => void;\n}\n\nexport const normalizeNum = (param: NumericalString) => {\n  // Ограничение длины числа до 10 символов\n  const rawNum = parseFloat(param as string);\n  const normalizedNum = rawNum\n    .toFixed(12)\n    .replace(/\\.?0+$/, \"\")\n    .slice(0, 12);\n  return {rawNum, normalizedNum};\n};\n\nconst TableRow = ({pairName, rowData, onClick}: TableRowProps) => {\n  const prevData = useRef(rowData || {});\n  const prevPair = useRef(pairName);\n\n  useEffect(() => {\n    prevData.current = rowData;\n    prevPair.current = pairName;\n  }, [rowData]);\n\n  return (\n    <tr onClick={onClick}>\n      <td>{pairName.replace(\"_\", \" / \")}</td>\n      {Object.keys(usefulKeysConfig).map((paramKey, i) => {\n        const keyConf = usefulKeysConfig[paramKey];\n\n        const param = rowData[paramKey as TRowKey];\n        const {rawNum, normalizedNum} = normalizeNum(param as NumericalString);\n\n        const getBg = () => {\n          let background = \"transparent\";\n          if (prevPair.current == pairName) {\n            // Отслеживание динамики изменений значения\n            const prev = Number(prevData.current?.[paramKey as TRowKey]);\n            const cur = rawNum;\n            const changedUp = cur > prev;\n            const changeDown = cur < prev;\n            background = changedUp\n              ? \"hsl(120deg, 100%, 25%, 0.1)\"\n              : changeDown\n              ? \"hsl(0deg, 100%, 50%, 0.1)\"\n              : \"transparent\";\n          }\n          return background;\n        };\n        return (\n          <td\n            key={i}\n            style={\n              {\n                textAlign: keyConf.align,\n                background: getBg(),\n              } as React.CSSProperties\n            }\n          >\n            {normalizedNum}\n            {keyConf?.postfix}\n          </td>\n        );\n      })}\n    </tr>\n  );\n};\n\nexport default TableRow;\n","import React from \"react\";\nimport {normalizeNum} from \"..\";\nimport {usefulKeysConfig} from \"../..\";\nimport {IQuotesSet, IRowData, NumericalString, TRowKey} from \"../../types\";\nimport \"./index.scss\";\n\ninterface ITableRow {\n  paramKey: TRowKey;\n  rowData: IRowData;\n}\n\nconst TableRowForm = ({rowData}: IQuotesSet) => {\n  delete rowData.id;\n\n  const title = rowData.pairName;\n  delete rowData.pairName;\n\n  return (\n    <div className=\"tableRowForm\">\n      <div className=\"tableRowForm-title\">{title}</div>\n      <table>\n        <tbody>\n          {Object.keys(rowData).map((x, i) => (\n            <RowFormField key={i} paramKey={x as TRowKey} rowData={rowData} />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nconst RowFormField = ({paramKey, rowData}: ITableRow) => {\n  const param = rowData[paramKey];\n  const keyConf = usefulKeysConfig[paramKey];\n  const {normalizedNum} = normalizeNum(param as NumericalString);\n  return (\n    <tr className=\"tableRowForm-row\">\n      <td>{keyConf?.label || paramKey}</td>\n      <td style={{paddingLeft: \"1rem\"}}>\n        {normalizedNum}\n        {keyConf?.postfix}\n      </td>\n    </tr>\n  );\n};\n\nexport default TableRowForm;\n","import React, {useState} from \"react\";\nimport quotes from \"../../store/quotes\";\nimport CustomModal from \"../modal\";\nimport Waiter from \"../waiter\";\nimport TableRowForm from \"./row/form\";\nimport \"./index.scss\";\nimport {IQuotesSet, IRowData} from \"./types\";\nimport TableRow from \"./row\";\n\nexport interface IKeyConf {\n  [key: string]: {\n    label: string;\n    align: string;\n    postfix?: string;\n  };\n}\n\nexport const usefulKeysConfig: IKeyConf = {\n  last: {label: \"Цена\", align: \"left\"},\n  highestBid: {label: \"Наивысшее\", align: \"right\"},\n  percentChange: {label: \"24ч Изменениe\", postfix: \"%\", align: \"right\"},\n};\n\ninterface TableProps {\n  data: IQuotesSet;\n}\n\nconst TableWidget = ({data}: TableProps) => {\n  const [selectedRow, setSelectedRow] = useState<IRowData | null>(null);\n  const currencyPairNames = Object.keys(data);\n\n  const handleOpenModal = (row: IRowData) => {\n    quotes.modalOpen = true;\n    setSelectedRow(row);\n  };\n  const handleCloseModal = () => {\n    quotes.modalOpen = false;\n    setSelectedRow(null);\n  };\n\n  return (\n    <>\n      <table className=\"tableWidget\">\n        <thead className=\"tableWidget-head\">\n          <tr>\n            <th style={{textAlign: \"left\"}}>Название</th>\n            {Object.keys(usefulKeysConfig).map((x, i) => {\n              const keyConf = usefulKeysConfig[x];\n              return (\n                <th\n                  key={i}\n                  style={{textAlign: keyConf.align} as React.CSSProperties}\n                >\n                  {keyConf.label}\n                </th>\n              );\n            })}\n          </tr>\n        </thead>\n\n        {data ? (\n          <tbody className=\"tableWidget-body\">\n            {currencyPairNames.map((pairName, i) => {\n              const rowData = data[pairName];\n              return (\n                <TableRow\n                  key={i}\n                  pairName={pairName}\n                  rowData={rowData}\n                  onClick={() => handleOpenModal({...rowData, pairName})}\n                />\n              );\n            })}\n          </tbody>\n        ) : (\n          <Waiter />\n        )}\n      </table>\n\n      <CustomModal open={quotes.modalOpen} onClose={handleCloseModal}>\n        {selectedRow && <TableRowForm rowData={selectedRow} />}\n      </CustomModal>\n    </>\n  );\n};\n\nexport default TableWidget;\n","import {observer} from \"mobx-react-lite\";\nimport React, {useEffect, useState} from \"react\";\nimport {Link, useParams} from \"react-router-dom\";\nimport ClockLoader from \"react-spinners/ClockLoader\";\nimport TableWidget from \"../../components/table\";\nimport quotes from \"../../store/quotes\";\n\nimport \"./index.scss\";\n\ntype PageParams = {\n  id: string | undefined;\n};\n\nconst QuotesPage = observer(() => {\n  const {id} = useParams<PageParams>();\n  const [tabNum, setTabNum] = useState<Number | undefined>(Number(id) || 1);\n\n  useEffect(() => {\n    quotes.fetchQuotes();\n  }, []);\n\n  useEffect(() => {\n    const updateInterval = setInterval(() => quotes.fetchQuotes(), 5000);\n    if (quotes.modalOpen) {\n      clearInterval(updateInterval);\n    }\n    return () => clearInterval(updateInterval);\n  }, [quotes.modalOpen]);\n\n  return (\n    <div className=\"quotesPage\">\n      <div className=\"quotesPage-header\">\n        <Link className=\"quotesPage-backBtn\" to=\"/\">\n          О приложении\n        </Link>\n        <div className=\"quotesPage-animIndicator\">\n          {quotes.error ? (\n            \"Ошибка\"\n          ) : quotes.loading ? (\n            <ClockLoader size={30} />\n          ) : null}\n        </div>\n      </div>\n      <div className=\"quotesPage-tabSelector\">\n        <div\n          className={`quotesPage-tabSelection ${\n            tabNum == 1 ? \"quotesPage-tabSelection-active\" : \"\"\n          }`}\n          onClick={() => setTabNum(1)}\n        >\n          Котировки А\n        </div>\n        <div\n          className={`quotesPage-tabSelection ${\n            tabNum == 2 ? \"quotesPage-tabSelection-active\" : \"\"\n          }`}\n          onClick={() => setTabNum(2)}\n        >\n          Котировки Б\n        </div>\n      </div>\n\n      <div className=\"quotesPage-tab\">\n        <TableWidget\n          data={tabNum === 1 ? quotes.quotesObjPart1 : quotes.quotesObjPart2}\n        />\n      </div>\n    </div>\n  );\n});\n\nexport default QuotesPage;\n"],"names":["Quotes","_classCallCheck","modalOpen","loading","error","quotesObjPart1","quotesObjPart2","makeAutoObservable","this","_createClass","key","value","_this","Object","keys","length","axios","server_url","then","res","resQuotes","entries","indexToSplitBefore","Math","floor","ob1","fromEntries","slice","ob2","_objectSpread","splitQuotesHalf","data","catch","err","console","log","_ref","children","_ref$title","title","_ref$open","open","_ref$onClose","onClose","_useState","useState","_useState2","_slicedToArray","index","setIndex","el","React","document","createElement","modal","ReactDOM","_jsxs","style","visibility","zIndex","_jsx","className","onClick","handlerClose","getClass","classList","push","join","useEffect","body","appendChild","removeChild","querySelectorAll","documentElement","overflow","normalizeNum","param","rawNum","parseFloat","normalizedNum","toFixed","replace","pairName","rowData","prevData","useRef","prevPair","current","usefulKeysConfig","map","paramKey","i","keyConf","_normalizeNum","textAlign","align","background","_prevData$current","prev","Number","getBg","postfix","RowFormField","_ref2","label","paddingLeft","id","x","last","highestBid","percentChange","selectedRow","setSelectedRow","currencyPairNames","_Fragment","TableRow","row","quotes","handleOpenModal","Waiter","CustomModal","TableRowForm","observer","useParams","tabNum","setTabNum","fetchQuotes","updateInterval","setInterval","clearInterval","Link","to","ClockLoader","size","concat","TableWidget"],"sourceRoot":""}